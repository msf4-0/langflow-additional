{"id":"f4226ea1-9e50-4063-8fc4-86acb6dde48e","data":{"nodes":[{"id":"Data-EmHbu","type":"genericNode","position":{"x":667.3918796805266,"y":660.5545712172355},"data":{"type":"Data","node":{"template":{"documents":{"type":"Document","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"The documents to split.","title_case":true},"chunk_overlap":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"2000","fileTypes":[],"file_path":"","password":false,"name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"The amount of overlap between chunks.","title_case":true},"chunk_size":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"5000","fileTypes":[],"file_path":"","password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"The maximum length of each chunk.","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\r\nfrom nltk import pos_tag, RegexpParser\r\nfrom langchain_core.documents import Document\r\nfrom langflow import CustomComponent\r\nfrom langflow.utils.util import build_loader_repr_from_documents\r\n\r\nclass SemanticChunkingTextSplitterComponent(CustomComponent):\r\n    display_name: str = \"Semantic Chunking Text Splitter\"\r\n    description: str = \"Splits the text based on semantic similarity.\"\r\n    documentation: str = \"https://docs.langflow.org/components/text-splitters#semanticchunkingtextsplitter\"\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"documents\": {\r\n                \"display_name\": \"Documents\",\r\n                \"info\": \"The documents to split.\",\r\n            },\r\n            \"chunk_size\": {\r\n                \"display_name\": \"Chunk Size\",\r\n                \"info\": \"The maximum length of each chunk.\",\r\n                \"field_type\": \"int\",\r\n                \"value\": 1000,\r\n            },\r\n            \"chunk_overlap\": {\r\n                \"display_name\": \"Chunk Overlap\",\r\n                \"info\": \"The amount of overlap between chunks.\",\r\n                \"field_type\": \"int\",\r\n                \"value\": 200,\r\n            },\r\n            \"code\": {\"show\": False},\r\n        }\r\n\r\n    def build(\r\n        self,\r\n        documents: list[Document],\r\n        chunk_size: Optional[int] = 1000,\r\n        chunk_overlap: Optional[int] = 200,\r\n    ) -> list[Document]:\r\n        \"\"\"\r\n        Split text into semantic chunks.\r\n\r\n        Args:\r\n            chunk_size (int): The maximum length of each chunk.\r\n            chunk_overlap (int): The amount of overlap between chunks.\r\n\r\n        Returns:\r\n            list[Document]: The documents with semantic chunks.\r\n        \"\"\"\r\n\r\n        # Implement semantic chunking logic here\r\n        def semantic_chunking(text):\r\n            # Tokenize the input text\r\n            tokens = text.split()  # You may need to adjust the tokenization method based on your requirements\r\n\r\n            # Perform part-of-speech tagging\r\n            tagged_tokens = pos_tag(tokens)\r\n\r\n            # Define a chunking grammar\r\n            grammar = r\"\"\"\r\n                NP: {<DT|JJ|NN.*>+}          # Chunk sequences of DT, JJ, NN\r\n                PP: {<IN><NP>}                # Chunk prepositions followed by NP\r\n            \"\"\"\r\n\r\n            # Create a chunk parser\r\n            parser = RegexpParser(grammar)\r\n\r\n            # Parse the tagged tokens\r\n            chunks = parser.parse(tagged_tokens)\r\n\r\n            # Extract and return the chunks\r\n            return [subtree.leaves() for subtree in chunks.subtrees(filter=lambda t: t.label() in ['NP', 'PP'])]\r\n\r\n        # Apply semantic chunking to each document\r\n        for document in documents:\r\n            if hasattr(document, 'text'):\r\n                # Split document text into chunks\r\n                chunks = []\r\n                current_chunk = \"\"\r\n                for sentence in document.text.split(\".\"):  # Splitting into sentences for semantic chunking\r\n                    sentence_chunks = semantic_chunking(sentence)\r\n                    for chunk in sentence_chunks:\r\n                        if len(current_chunk) + len(\" \".join(chunk)) <= chunk_size:\r\n                            current_chunk += \" \".join(chunk) + \" \"\r\n                        else:\r\n                            chunks.append(current_chunk.strip())\r\n                            current_chunk = \" \".join(chunk) + \" \"\r\n                if current_chunk:\r\n                    chunks.append(current_chunk.strip())\r\n                document.text_chunks = chunks\r\n\r\n        self.repr_value = build_loader_repr_from_documents(documents)\r\n        return documents\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Splits the text based on semantic similarity.","base_classes":["Document"],"display_name":"Semantic Chunking Text Splitter","documentation":"https://docs.langflow.org/components/text-splitters#semanticchunkingtextsplitter","custom_fields":{"documents":null,"chunk_size":null,"chunk_overlap":null},"output_types":["Document"],"field_formatters":{},"beta":true},"id":"Data-EmHbu","description":"Splits the text based on semantic similarity.","display_name":"Semantic Chunking Text Splitter"},"selected":false,"width":384,"height":501},{"id":"OpenAIEmbeddings-VZoxs","type":"genericNode","position":{"x":746.7397624571021,"y":1279.3694477223257},"data":{"type":"OpenAIEmbeddings","node":{"template":{"allowed_special":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":[],"fileTypes":[],"file_path":"","password":false,"name":"allowed_special","display_name":"Allowed Special","advanced":true,"dynamic":false,"info":"","title_case":true},"chunk_size":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":1000,"fileTypes":[],"file_path":"","password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":true,"dynamic":false,"info":"","title_case":true},"client":{"type":"Any","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"client","display_name":"Client","advanced":true,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom langflow import CustomComponent\nfrom langflow.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"default_headers":{"type":"dict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"default_headers","display_name":"Default Headers","advanced":true,"dynamic":false,"info":"","title_case":true},"default_query":{"type":"NestedDict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"default_query","display_name":"Default Query","advanced":true,"dynamic":false,"info":"","title_case":true},"deployment":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"text-embedding-3-small","fileTypes":[],"file_path":"","password":false,"name":"deployment","display_name":"Deployment","advanced":true,"dynamic":false,"info":"","title_case":true},"disallowed_special":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":["all"],"fileTypes":[],"file_path":"","password":false,"name":"disallowed_special","display_name":"Disallowed Special","advanced":true,"dynamic":false,"info":"","title_case":true},"embedding_ctx_length":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":8191,"fileTypes":[],"file_path":"","password":false,"name":"embedding_ctx_length","display_name":"Embedding Context Length","advanced":true,"dynamic":false,"info":"","title_case":true},"max_retries":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":6,"fileTypes":[],"file_path":"","password":false,"name":"max_retries","display_name":"Max Retries","advanced":true,"dynamic":false,"info":"","title_case":true},"model":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"text-embedding-3-large","fileTypes":[],"file_path":"","password":false,"options":["text-embedding-3-small","text-embedding-3-large","text-embedding-ada-002"],"name":"model","display_name":"Model","advanced":false,"dynamic":false,"info":"","title_case":true},"model_kwargs":{"type":"NestedDict","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":true},"openai_api_base":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"","title_case":true,"value":""},"openai_api_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"sk-proj-Hsc00rHNFSTKQFpy9xkyT3BlbkFJvzLJVGTMmyCKUprC1rWe","fileTypes":[],"file_path":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"","title_case":true},"openai_api_type":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"openai_api_type","display_name":"OpenAI API Type","advanced":true,"dynamic":false,"info":"","title_case":true,"value":""},"openai_api_version":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_api_version","display_name":"OpenAI API Version","advanced":true,"dynamic":false,"info":"","title_case":true},"openai_organization":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_organization","display_name":"OpenAI Organization","advanced":true,"dynamic":false,"info":"","title_case":true},"openai_proxy":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_proxy","display_name":"OpenAI Proxy","advanced":true,"dynamic":false,"info":"","title_case":true},"request_timeout":{"type":"float","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"request_timeout","display_name":"Request Timeout","advanced":true,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"show_progress_bar":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"show_progress_bar","display_name":"Show Progress Bar","advanced":true,"dynamic":false,"info":"","title_case":true},"skip_empty":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"skip_empty","display_name":"Skip Empty","advanced":true,"dynamic":false,"info":"","title_case":true},"tiktoken_enable":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"tiktoken_enable","advanced":false,"dynamic":false,"info":"","title_case":true},"tiktoken_model_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"tiktoken_model_name","display_name":"TikToken Model Name","advanced":false,"dynamic":false,"info":"","title_case":true,"value":""},"_type":"CustomComponent"},"description":"OpenAI embedding models","base_classes":["OpenAIEmbeddings","Embeddings","Callable"],"display_name":"OpenAIEmbeddings","documentation":"","custom_fields":{"default_headers":null,"default_query":null,"allowed_special":null,"disallowed_special":null,"chunk_size":null,"client":null,"deployment":null,"embedding_ctx_length":null,"max_retries":null,"model":null,"model_kwargs":null,"openai_api_base":null,"openai_api_key":null,"openai_api_type":null,"openai_api_version":null,"openai_organization":null,"openai_proxy":null,"request_timeout":null,"show_progress_bar":null,"skip_empty":null,"tiktoken_enable":null,"tiktoken_model_name":null},"output_types":["OpenAIEmbeddings","Callable"],"field_formatters":{},"beta":true},"id":"OpenAIEmbeddings-VZoxs"},"selected":false,"width":384,"height":635},{"id":"Chroma-95eNk","type":"genericNode","position":{"x":1351.6932197807841,"y":846.1093563299473},"data":{"type":"Chroma","node":{"template":{"documents":{"type":"Document","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","title_case":true},"embedding":{"type":"Embeddings","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","title_case":true},"chroma_server_cors_allow_origins":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"chroma_server_cors_allow_origins","display_name":"Server CORS Allow Origins","advanced":true,"dynamic":false,"info":"","title_case":true},"chroma_server_grpc_port":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"chroma_server_grpc_port","display_name":"Server gRPC Port","advanced":true,"dynamic":false,"info":"","title_case":true},"chroma_server_host":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"chroma_server_host","display_name":"Server Host","advanced":true,"dynamic":false,"info":"","title_case":true},"chroma_server_port":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"chroma_server_port","display_name":"Server Port","advanced":true,"dynamic":false,"info":"","title_case":true},"chroma_server_ssl_enabled":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"chroma_server_ssl_enabled","display_name":"Server SSL Enabled","advanced":true,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List, Optional, Union\n\nimport chromadb  # type: ignore\nfrom langchain.embeddings.base import Embeddings\nfrom langchain.schema import BaseRetriever, Document\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.chroma import Chroma\nfrom langflow import CustomComponent\n\n\nclass ChromaComponent(CustomComponent):\n    \"\"\"\n    A custom component for implementing a Vector Store using Chroma.\n    \"\"\"\n\n    display_name: str = \"Chroma\"\n    description: str = \"Implementation of Vector Store using Chroma\"\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\n    beta: bool = True\n\n    def build_config(self):\n        \"\"\"\n        Builds the configuration for the component.\n\n        Returns:\n        - dict: A dictionary containing the configuration options for the component.\n        \"\"\"\n        return {\n            \"collection_name\": {\"display_name\": \"Collection Name\", \"value\": \"langflow\"},\n            \"persist\": {\"display_name\": \"Persist\"},\n            \"persist_directory\": {\"display_name\": \"Persist Directory\"},\n            \"code\": {\"advanced\": True, \"display_name\": \"Code\"},\n            \"documents\": {\"display_name\": \"Documents\", \"is_list\": True},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n            \"chroma_server_cors_allow_origins\": {\n                \"display_name\": \"Server CORS Allow Origins\",\n                \"advanced\": True,\n            },\n            \"chroma_server_host\": {\"display_name\": \"Server Host\", \"advanced\": True},\n            \"chroma_server_port\": {\"display_name\": \"Server Port\", \"advanced\": True},\n            \"chroma_server_grpc_port\": {\n                \"display_name\": \"Server gRPC Port\",\n                \"advanced\": True,\n            },\n            \"chroma_server_ssl_enabled\": {\n                \"display_name\": \"Server SSL Enabled\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        collection_name: str,\n        persist: bool,\n        embedding: Embeddings,\n        chroma_server_ssl_enabled: bool,\n        persist_directory: Optional[str] = None,\n        documents: Optional[List[Document]] = None,\n        chroma_server_cors_allow_origins: Optional[str] = None,\n        chroma_server_host: Optional[str] = None,\n        chroma_server_port: Optional[int] = None,\n        chroma_server_grpc_port: Optional[int] = None,\n    ) -> Union[VectorStore, BaseRetriever]:\n        \"\"\"\n        Builds the Vector Store or BaseRetriever object.\n\n        Args:\n        - collection_name (str): The name of the collection.\n        - persist_directory (Optional[str]): The directory to persist the Vector Store to.\n        - chroma_server_ssl_enabled (bool): Whether to enable SSL for the Chroma server.\n        - persist (bool): Whether to persist the Vector Store or not.\n        - embedding (Optional[Embeddings]): The embeddings to use for the Vector Store.\n        - documents (Optional[Document]): The documents to use for the Vector Store.\n        - chroma_server_cors_allow_origins (Optional[str]): The CORS allow origins for the Chroma server.\n        - chroma_server_host (Optional[str]): The host for the Chroma server.\n        - chroma_server_port (Optional[int]): The port for the Chroma server.\n        - chroma_server_grpc_port (Optional[int]): The gRPC port for the Chroma server.\n\n        Returns:\n        - Union[VectorStore, BaseRetriever]: The Vector Store or BaseRetriever object.\n        \"\"\"\n\n        # Chroma settings\n        chroma_settings = None\n\n        if chroma_server_host is not None:\n            chroma_settings = chromadb.config.Settings(\n                chroma_server_cors_allow_origins=chroma_server_cors_allow_origins or None,\n                chroma_server_host=chroma_server_host,\n                chroma_server_port=chroma_server_port or None,\n                chroma_server_grpc_port=chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=chroma_server_ssl_enabled,\n            )\n\n        # If documents, then we need to create a Chroma instance using .from_documents\n        if documents is not None and embedding is not None:\n            if len(documents) == 0:\n                raise ValueError(\"If documents are provided, there must be at least one document.\")\n            return Chroma.from_documents(\n                documents=documents,  # type: ignore\n                persist_directory=persist_directory if persist else None,\n                collection_name=collection_name,\n                embedding=embedding,\n                client_settings=chroma_settings,\n            )\n\n        return Chroma(persist_directory=persist_directory, client_settings=chroma_settings)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","title_case":true},"collection_name":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"allinone3","fileTypes":[],"file_path":"","password":false,"name":"collection_name","display_name":"Collection Name","advanced":false,"dynamic":false,"info":"","title_case":true},"persist":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"persist","display_name":"Persist","advanced":false,"dynamic":false,"info":"","title_case":true},"persist_directory":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"persist_directory","display_name":"Persist Directory","advanced":false,"dynamic":false,"info":"","title_case":true,"value":"sol"},"_type":"CustomComponent"},"description":"Implementation of Vector Store using Chroma","base_classes":["VectorStore","BaseRetriever"],"display_name":"Chroma","documentation":"https://python.langchain.com/docs/integrations/vectorstores/chroma","custom_fields":{"collection_name":null,"persist":null,"embedding":null,"chroma_server_ssl_enabled":null,"persist_directory":null,"documents":null,"chroma_server_cors_allow_origins":null,"chroma_server_host":null,"chroma_server_port":null,"chroma_server_grpc_port":null},"output_types":["VectorStore","BaseRetriever"],"field_formatters":{},"beta":true},"id":"Chroma-95eNk"},"selected":false,"width":384,"height":555},{"id":"ChatOpenAI-Dxe2P","type":"genericNode","position":{"x":-214.35836937617876,"y":-35},"data":{"type":"ChatOpenAI","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"max_tokens":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":256,"fileTypes":[],"file_path":"","password":false,"name":"max_tokens","display_name":"Max Tokens","advanced":false,"dynamic":false,"info":"","title_case":true},"model_kwargs":{"type":"NestedDict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":true},"model_name":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"gpt-3.5-turbo-0125","fileTypes":[],"file_path":"","password":false,"options":["gpt-4-turbo-preview","gpt-4-0125-preview","gpt-4-1106-preview","gpt-4-vision-preview","gpt-3.5-turbo-0125","gpt-3.5-turbo-1106"],"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":true},"openai_api_base":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":false,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":true},"openai_api_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"","title_case":true,"value":"sk-proj-Hsc00rHNFSTKQFpy9xkyT3BlbkFJvzLJVGTMmyCKUprC1rWe"},"temperature":{"type":"float","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"0.1","fileTypes":[],"file_path":"","password":false,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"_type":"CustomComponent"},"description":"`OpenAI` Chat large language models API.","base_classes":["BaseLanguageModel","BaseLanguageModel","BaseLLM"],"display_name":"ChatOpenAI","documentation":"","custom_fields":{"max_tokens":null,"model_kwargs":null,"model_name":null,"openai_api_base":null,"openai_api_key":null,"temperature":null},"output_types":["BaseLanguageModel","BaseLLM"],"field_formatters":{},"beta":true},"id":"ChatOpenAI-Dxe2P"},"selected":false,"width":384,"height":731},{"id":"CombineDocsChain-9ynVK","type":"genericNode","position":{"x":1488.167774566869,"y":382.3274893737755},"data":{"type":"CombineDocsChain","node":{"template":{"llm":{"type":"BaseLanguageModel","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"llm","display_name":"LLM","advanced":false,"dynamic":false,"info":"","title_case":true},"chain_type":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"stuff","fileTypes":[],"file_path":"","password":false,"options":["stuff","map_reduce","map_rerank","refine"],"name":"chain_type","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"load_qa_chain"},"description":"Load question answering chain.","base_classes":["BaseCombineDocumentsChain","Callable"],"display_name":"CombineDocsChain","documentation":"","custom_fields":{},"output_types":[],"field_formatters":{},"beta":false},"id":"CombineDocsChain-9ynVK"},"selected":false,"width":384,"height":333},{"id":"RetrievalQA-xjxzD","type":"genericNode","position":{"x":2372.2203220721153,"y":748.9499738890847},"data":{"type":"RetrievalQA","node":{"template":{"combine_documents_chain":{"type":"BaseCombineDocumentsChain","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"combine_documents_chain","display_name":"Combine Documents Chain","advanced":false,"dynamic":false,"info":"","title_case":true},"memory":{"type":"BaseMemory","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"memory","display_name":"Memory","advanced":false,"dynamic":false,"info":"","title_case":true},"retriever":{"type":"BaseRetriever","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"retriever","display_name":"Retriever","advanced":false,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Callable, Optional, Union\n\nfrom langchain.chains.combine_documents.base import BaseCombineDocumentsChain\nfrom langchain.chains.retrieval_qa.base import BaseRetrievalQA, RetrievalQA\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseMemory, BaseRetriever\n\n\nclass RetrievalQAComponent(CustomComponent):\n    display_name = \"RetrievalQA\"\n    description = \"Chain for question-answering against an index.\"\n\n    def build_config(self):\n        return {\n            \"combine_documents_chain\": {\"display_name\": \"Combine Documents Chain\"},\n            \"retriever\": {\"display_name\": \"Retriever\"},\n            \"memory\": {\"display_name\": \"Memory\", \"required\": False},\n            \"input_key\": {\"display_name\": \"Input Key\", \"advanced\": True},\n            \"output_key\": {\"display_name\": \"Output Key\", \"advanced\": True},\n            \"return_source_documents\": {\"display_name\": \"Return Source Documents\"},\n        }\n\n    def build(\n        self,\n        combine_documents_chain: BaseCombineDocumentsChain,\n        retriever: BaseRetriever,\n        memory: Optional[BaseMemory] = None,\n        input_key: str = \"query\",\n        output_key: str = \"result\",\n        return_source_documents: bool = True,\n    ) -> Union[BaseRetrievalQA, Callable]:\n        return RetrievalQA(\n            combine_documents_chain=combine_documents_chain,\n            retriever=retriever,\n            memory=memory,\n            input_key=input_key,\n            output_key=output_key,\n            return_source_documents=return_source_documents,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"input_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"query","fileTypes":[],"file_path":"","password":false,"name":"input_key","display_name":"Input Key","advanced":true,"dynamic":false,"info":"","title_case":true},"output_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"result","fileTypes":[],"file_path":"","password":false,"name":"output_key","display_name":"Output Key","advanced":true,"dynamic":false,"info":"","title_case":true},"return_source_documents":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"return_source_documents","display_name":"Return Source Documents","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Chain for question-answering against an index.","base_classes":["BaseRetrievalQA","Chain","Callable"],"display_name":"RetrievalQA","documentation":"","custom_fields":{"combine_documents_chain":null,"retriever":null,"memory":null,"input_key":null,"output_key":null,"return_source_documents":null},"output_types":["BaseRetrievalQA","Callable"],"field_formatters":{},"beta":true},"id":"RetrievalQA-xjxzD"},"selected":false,"width":384,"height":501},{"id":"Data-BgRUf","type":"genericNode","position":{"x":-219.6263177449518,"y":869.8925932810677},"data":{"type":"Data","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import cv2\nimport os\nimport glob\nfrom langflow import CustomComponent\nfrom langchain.schema import Document\nfrom typing import Any, Dict, List\n\n\nclass ALLDirectoryLoaderComponent(CustomComponent):\n    display_name: str = \"All In One Directory Loader\"\n    description: str = \"Recursively load components from a given directory\"\n    beta = True\n    loaders_info: List[Dict[str, Any]] = [\n    {\n        \"loader\": \"AirbyteJSONLoader\",\n        \"name\": \"Airbyte JSON (.jsonl)\",\n        \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n        \"defaultFor\": [\"jsonl\"],\n        \"allowdTypes\": [\"jsonl\"],\n    },\n    {\n        \"loader\": \"JSONLoader\",\n        \"name\": \"JSON (.json)\",\n        \"import\": \"langchain.document_loaders.JSONLoader\",\n        \"defaultFor\": [\"json\"],\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"BSHTMLLoader\",\n        \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"CSVLoader\",\n        \"name\": \"CSV (.csv)\",\n        \"import\": \"langchain.document_loaders.CSVLoader\",\n        \"defaultFor\": [\"csv\"],\n        \"allowdTypes\": [\"csv\"],\n    },\n    {\n        \"loader\": \"CoNLLULoader\",\n        \"name\": \"CoNLL-U (.conllu)\",\n        \"import\": \"langchain.document_loaders.CoNLLULoader\",\n        \"defaultFor\": [\"conllu\"],\n        \"allowdTypes\": [\"conllu\"],\n    },\n    {\n        \"loader\": \"EverNoteLoader\",\n        \"name\": \"EverNote (.enex)\",\n        \"import\": \"langchain.document_loaders.EverNoteLoader\",\n        \"defaultFor\": [\"enex\"],\n        \"allowdTypes\": [\"enex\"],\n    },\n    {\n        \"loader\": \"FacebookChatLoader\",\n        \"name\": \"Facebook Chat (.json)\",\n        \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"OutlookMessageLoader\",\n        \"name\": \"Outlook Message (.msg)\",\n        \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n        \"defaultFor\": [\"msg\"],\n        \"allowdTypes\": [\"msg\"],\n    },\n    {\n        \"loader\": \"PyPDFLoader\",\n        \"name\": \"PyPDF (.pdf)\",\n        \"import\": \"langchain.document_loaders.PyPDFLoader\",\n        \"defaultFor\": [\"pdf\"],\n        \"allowdTypes\": [\"pdf\"],\n    },\n    {\n        \"loader\": \"STRLoader\",\n        \"name\": \"Subtitle (.str)\",\n        \"import\": \"langchain.document_loaders.STRLoader\",\n        \"defaultFor\": [\"str\"],\n        \"allowdTypes\": [\"str\"],\n    },\n    {\n        \"loader\": \"TextLoader\",\n        \"name\": \"Text (.txt)\",\n        \"import\": \"langchain.document_loaders.TextLoader\",\n        \"defaultFor\": [\"txt\"],\n        \"allowdTypes\": [\"txt\"],\n    },\n    {\n        \"loader\": \"UnstructuredEmailLoader\",\n        \"name\": \"Unstructured Email (.eml)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n        \"defaultFor\": [\"eml\"],\n        \"allowdTypes\": [\"eml\"],\n    },\n    {\n        \"loader\": \"UnstructuredHTMLLoader\",\n        \"name\": \"Unstructured HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n        \"defaultFor\": [\"html\", \"htm\"],\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"UnstructuredMarkdownLoader\",\n        \"name\": \"Unstructured Markdown (.md)\",\n        \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n        \"defaultFor\": [\"md\"],\n        \"allowdTypes\": [\"md\"],\n    },\n    {\n        \"loader\": \"UnstructuredPowerPointLoader\",\n        \"name\": \"Unstructured PowerPoint (.pptx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n        \"defaultFor\": [\"pptx\"],\n        \"allowdTypes\": [\"pptx\"],\n    },\n    {\n        \"loader\": \"UnstructuredWordLoader\",\n        \"name\": \"Unstructured Word (.docx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n        \"defaultFor\": [\"docx\"],\n        \"allowdTypes\": [\"docx\"],\n    },\n    {\n        \"loader\": \"UnstructuredEPubLoader\",\n        \"name\": \"Unstructured EPub (.epub)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEPubLoader\",\n        \"defaultFor\": [\"epub\"],\n        \"allowdTypes\": [\"epub\"],\n    },\n    {\n        \"loader\": \"UnstructuredImageLoader\",\n        \"name\": \"Unstructured Image (.jpg, .png, .jpeg)\",\n        \"import\": \"langchain_community.document_loaders.image.UnstructuredImageLoader\",\n        \"defaultFor\": [\"jpg\",\"png\",\"jpeg\"],\n        \"allowdTypes\": [\"jpg\",\"png\",\"jpeg\"],\n    },\n]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                    \"docx\",\n                    \"epub\",\n                    \"jpg\",\n                    \"jpeg\",\n                    \"png\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                    \".epup\",\n                    \".jpg\",\n                    \".jpeg\",\n                    \".png\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def load_file(self, file_path: str, loader: str):\n        file_type = file_path.split(\".\")[-1]\n\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(\n                f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\"\n            )\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n         # Set extract_images to True only for PDF or DOCX loaders\n        if file_type in [\"pdf\", \"docx\"]:\n            result = loader_instance(file_path=file_path, extract_images=True)\n        else:\n            result = loader_instance(file_path=file_path)\n        result = result.load()\n        self.status = result\n        return result\n        \n    def recursive_glob(self, directory_path, depth):\n        pattern = \"/**/*.*\" if depth > 0 else \"/*.*\"\n        return [file for file in glob.glob(directory_path + pattern, recursive=True) if file.count(os.sep) <= depth + directory_path.count(os.sep)]\n    \n\n    def build(self, directory_path: str, loader: str, depth:int=3) -> Document:\n        if not os.path.exists(directory_path):\n            raise ValueError(f\"Directory not found: {directory_path}\")\n            \n        suffixes = list(set([i for j in self.loaders_info for i in j[\"allowdTypes\"]]))\n\n        files = self.recursive_glob(directory_path, depth=depth)\n        files = [f for f in files if f.split('.')[-1] in suffixes]\n        \n        docs = []\n        for file in files:\n            doc = self.load_file(file, loader)\n            docs.extend(doc)\n        self.status = docs\n        return docs\n            ","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"depth":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":3,"fileTypes":[],"file_path":"","password":false,"name":"depth","advanced":false,"dynamic":false,"info":"","title_case":true},"directory_path":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"directory_path","advanced":false,"dynamic":false,"info":"","title_case":true,"value":"/mnt/all"},"loader":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"Automatic","fileTypes":[],"file_path":"","password":false,"options":["Automatic","Airbyte JSON (.jsonl)","JSON (.json)","BeautifulSoup4 HTML (.html, .htm)","CSV (.csv)","CoNLL-U (.conllu)","EverNote (.enex)","Facebook Chat (.json)","Outlook Message (.msg)","PyPDF (.pdf)","Subtitle (.str)","Text (.txt)","Unstructured Email (.eml)","Unstructured HTML (.html, .htm)","Unstructured Markdown (.md)","Unstructured PowerPoint (.pptx)","Unstructured Word (.docx)","Unstructured EPub (.epub)","Unstructured Image (.jpg, .png, .jpeg)"],"name":"loader","display_name":"Loader","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Recursively load components from a given directory","base_classes":["Document"],"display_name":"All In One Directory Loader","documentation":"","custom_fields":{"directory_path":null,"loader":null,"depth":null},"output_types":["Document"],"field_formatters":{},"beta":true},"id":"Data-BgRUf","description":"Recursively load components from a given directory","display_name":"All In One Directory Loader"},"selected":true,"width":384,"height":551,"dragging":false,"positionAbsolute":{"x":-219.6263177449518,"y":869.8925932810677}}],"edges":[{"source":"Data-EmHbu","target":"Chroma-95eNk","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-EmHbuœ}","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œChroma-95eNkœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","id":"reactflow__edge-Data-EmHbu{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-EmHbuœ}-Chroma-95eNk{œfieldNameœ:œdocumentsœ,œidœ:œChroma-95eNkœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"Chroma-95eNk","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"Data","id":"Data-EmHbu"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"selected":false},{"source":"OpenAIEmbeddings-VZoxs","target":"Chroma-95eNk","sourceHandle":"{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-VZoxsœ}","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œChroma-95eNkœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","id":"reactflow__edge-OpenAIEmbeddings-VZoxs{œbaseClassesœ:[œOpenAIEmbeddingsœ,œEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-VZoxsœ}-Chroma-95eNk{œfieldNameœ:œembeddingœ,œidœ:œChroma-95eNkœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","data":{"targetHandle":{"fieldName":"embedding","id":"Chroma-95eNk","inputTypes":null,"type":"Embeddings"},"sourceHandle":{"baseClasses":["OpenAIEmbeddings","Embeddings","Callable"],"dataType":"OpenAIEmbeddings","id":"OpenAIEmbeddings-VZoxs"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"selected":false},{"source":"ChatOpenAI-Dxe2P","target":"CombineDocsChain-9ynVK","sourceHandle":"{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Dxe2Pœ}","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-9ynVKœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}","id":"reactflow__edge-ChatOpenAI-Dxe2P{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Dxe2Pœ}-CombineDocsChain-9ynVK{œfieldNameœ:œllmœ,œidœ:œCombineDocsChain-9ynVKœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}","data":{"targetHandle":{"fieldName":"llm","id":"CombineDocsChain-9ynVK","inputTypes":null,"type":"BaseLanguageModel"},"sourceHandle":{"baseClasses":["BaseLanguageModel","BaseLanguageModel","BaseLLM"],"dataType":"ChatOpenAI","id":"ChatOpenAI-Dxe2P"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"selected":false},{"source":"CombineDocsChain-9ynVK","target":"RetrievalQA-xjxzD","sourceHandle":"{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-9ynVKœ}","targetHandle":"{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-xjxzDœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}","id":"reactflow__edge-CombineDocsChain-9ynVK{œbaseClassesœ:[œBaseCombineDocumentsChainœ,œCallableœ],œdataTypeœ:œCombineDocsChainœ,œidœ:œCombineDocsChain-9ynVKœ}-RetrievalQA-xjxzD{œfieldNameœ:œcombine_documents_chainœ,œidœ:œRetrievalQA-xjxzDœ,œinputTypesœ:null,œtypeœ:œBaseCombineDocumentsChainœ}","data":{"targetHandle":{"fieldName":"combine_documents_chain","id":"RetrievalQA-xjxzD","inputTypes":null,"type":"BaseCombineDocumentsChain"},"sourceHandle":{"baseClasses":["BaseCombineDocumentsChain","Callable"],"dataType":"CombineDocsChain","id":"CombineDocsChain-9ynVK"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"selected":false},{"source":"Chroma-95eNk","target":"RetrievalQA-xjxzD","sourceHandle":"{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-95eNkœ}","targetHandle":"{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-xjxzDœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}","id":"reactflow__edge-Chroma-95eNk{œbaseClassesœ:[œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œChromaœ,œidœ:œChroma-95eNkœ}-RetrievalQA-xjxzD{œfieldNameœ:œretrieverœ,œidœ:œRetrievalQA-xjxzDœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}","data":{"targetHandle":{"fieldName":"retriever","id":"RetrievalQA-xjxzD","inputTypes":null,"type":"BaseRetriever"},"sourceHandle":{"baseClasses":["VectorStore","BaseRetriever"],"dataType":"Chroma","id":"Chroma-95eNk"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"selected":false},{"source":"Data-BgRUf","target":"Data-EmHbu","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-BgRUfœ}","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œData-EmHbuœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","id":"reactflow__edge-Data-BgRUf{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDataœ,œidœ:œData-BgRUfœ}-Data-EmHbu{œfieldNameœ:œdocumentsœ,œidœ:œData-EmHbuœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"Data-EmHbu","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"Data","id":"Data-BgRUf"}},"style":{"stroke":"#555"},"className":"stroke-gray-900  stroke-connection","animated":false,"selected":false}],"viewport":{"x":305.50019173886744,"y":-353.7726173340874,"zoom":0.69165810301174}},"description":"Powerful Prompts, Perfectly Positioned.","name":"All file loader","last_tested_version":"0.6.12","is_component":false}