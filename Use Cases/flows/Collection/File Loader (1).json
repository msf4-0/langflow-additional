{"id":"42e5842c-cc65-4879-9a0d-6aea59440c1b","name":"File Loader","data":{"edges":[],"nodes":[{"data":{"type":"CustomComponent","node":{"template":{"file_path":{"type":"file","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":["json","txt","csv","jsonl","html","htm","conllu","enex","msg","pdf","srt","eml","md","pptx","docx"],"file_path":"/home/user/.cache/langflow/d622053f-ac84-4799-9ef2-8a5a35cda22f/5930870a6a817456492e9ec6819afb4c7b7247452057de327fa62a040239bb0e.txt","password":false,"name":"file_path","display_name":"File Path","advanced":false,"dynamic":false,"info":"","value":""},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow import CustomComponent\nfrom langchain.schema import Document\nfrom typing import Any, Dict, List\n\nclass FileLoaderComponent(CustomComponent):\n    display_name: str = \"File Loader\"\n    description: str = \"A generic loader that auto-detects file types.\"\n    beta = True\n    loaders_info: List[Dict[str, Any]] = [\n    {\n        \"loader\": \"AirbyteJSONLoader\",\n        \"name\": \"Airbyte JSON (.jsonl)\",\n        \"import\": \"langchain.document_loaders.AirbyteJSONLoader\",\n        \"defaultFor\": [\"jsonl\"],\n        \"allowdTypes\": [\"jsonl\"],\n    },\n    {\n        \"loader\": \"JSONLoader\",\n        \"name\": \"JSON (.json)\",\n        \"import\": \"langchain.document_loaders.JSONLoader\",\n        \"defaultFor\": [\"json\"],\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"BSHTMLLoader\",\n        \"name\": \"BeautifulSoup4 HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.BSHTMLLoader\",\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"CSVLoader\",\n        \"name\": \"CSV (.csv)\",\n        \"import\": \"langchain.document_loaders.CSVLoader\",\n        \"defaultFor\": [\"csv\"],\n        \"allowdTypes\": [\"csv\"],\n    },\n    {\n        \"loader\": \"CoNLLULoader\",\n        \"name\": \"CoNLL-U (.conllu)\",\n        \"import\": \"langchain.document_loaders.CoNLLULoader\",\n        \"defaultFor\": [\"conllu\"],\n        \"allowdTypes\": [\"conllu\"],\n    },\n    {\n        \"loader\": \"EverNoteLoader\",\n        \"name\": \"EverNote (.enex)\",\n        \"import\": \"langchain.document_loaders.EverNoteLoader\",\n        \"defaultFor\": [\"enex\"],\n        \"allowdTypes\": [\"enex\"],\n    },\n    {\n        \"loader\": \"FacebookChatLoader\",\n        \"name\": \"Facebook Chat (.json)\",\n        \"import\": \"langchain.document_loaders.FacebookChatLoader\",\n        \"allowdTypes\": [\"json\"],\n    },\n    {\n        \"loader\": \"OutlookMessageLoader\",\n        \"name\": \"Outlook Message (.msg)\",\n        \"import\": \"langchain.document_loaders.OutlookMessageLoader\",\n        \"defaultFor\": [\"msg\"],\n        \"allowdTypes\": [\"msg\"],\n    },\n    {\n        \"loader\": \"PyPDFLoader\",\n        \"name\": \"PyPDF (.pdf)\",\n        \"import\": \"langchain.document_loaders.PyPDFLoader\",\n        \"defaultFor\": [\"pdf\"],\n        \"allowdTypes\": [\"pdf\"],\n    },\n    {\n        \"loader\": \"STRLoader\",\n        \"name\": \"Subtitle (.str)\",\n        \"import\": \"langchain.document_loaders.STRLoader\",\n        \"defaultFor\": [\"str\"],\n        \"allowdTypes\": [\"str\"],\n    },\n    {\n        \"loader\": \"TextLoader\",\n        \"name\": \"Text (.txt)\",\n        \"import\": \"langchain.document_loaders.TextLoader\",\n        \"defaultFor\": [\"txt\"],\n        \"allowdTypes\": [\"txt\"],\n    },\n    {\n        \"loader\": \"UnstructuredEmailLoader\",\n        \"name\": \"Unstructured Email (.eml)\",\n        \"import\": \"langchain.document_loaders.UnstructuredEmailLoader\",\n        \"defaultFor\": [\"eml\"],\n        \"allowdTypes\": [\"eml\"],\n    },\n    {\n        \"loader\": \"UnstructuredHTMLLoader\",\n        \"name\": \"Unstructured HTML (.html, .htm)\",\n        \"import\": \"langchain.document_loaders.UnstructuredHTMLLoader\",\n        \"defaultFor\": [\"html\", \"htm\"],\n        \"allowdTypes\": [\"html\", \"htm\"],\n    },\n    {\n        \"loader\": \"UnstructuredMarkdownLoader\",\n        \"name\": \"Unstructured Markdown (.md)\",\n        \"import\": \"langchain.document_loaders.UnstructuredMarkdownLoader\",\n        \"defaultFor\": [\"md\"],\n        \"allowdTypes\": [\"md\"],\n    },\n    {\n        \"loader\": \"UnstructuredPowerPointLoader\",\n        \"name\": \"Unstructured PowerPoint (.pptx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredPowerPointLoader\",\n        \"defaultFor\": [\"pptx\"],\n        \"allowdTypes\": [\"pptx\"],\n    },\n    {\n        \"loader\": \"UnstructuredWordLoader\",\n        \"name\": \"Unstructured Word (.docx)\",\n        \"import\": \"langchain.document_loaders.UnstructuredWordLoader\",\n        \"defaultFor\": [\"docx\"],\n        \"allowdTypes\": [\"docx\"],\n    },\n]\n\n    def build_config(self):\n        loader_options = [\"Automatic\"] + [\n            loader_info[\"name\"] for loader_info in self.loaders_info\n        ]\n\n        file_types = []\n        suffixes = []\n\n        for loader_info in self.loaders_info:\n            if \"allowedTypes\" in loader_info:\n                file_types.extend(loader_info[\"allowedTypes\"])\n                suffixes.extend([f\".{ext}\" for ext in loader_info[\"allowedTypes\"]])\n\n        return {\n            \"file_path\": {\n                \"display_name\": \"File Path\",\n                \"required\": True,\n                \"field_type\": \"file\",\n                \"file_types\": [\n                    \"json\",\n                    \"txt\",\n                    \"csv\",\n                    \"jsonl\",\n                    \"html\",\n                    \"htm\",\n                    \"conllu\",\n                    \"enex\",\n                    \"msg\",\n                    \"pdf\",\n                    \"srt\",\n                    \"eml\",\n                    \"md\",\n                    \"pptx\",\n                    \"docx\",\n                ],\n                \"suffixes\": [\n                    \".json\",\n                    \".txt\",\n                    \".csv\",\n                    \".jsonl\",\n                    \".html\",\n                    \".htm\",\n                    \".conllu\",\n                    \".enex\",\n                    \".msg\",\n                    \".pdf\",\n                    \".srt\",\n                    \".eml\",\n                    \".md\",\n                    \".pptx\",\n                    \".docx\",\n                ],\n                # \"file_types\" : file_types,\n                # \"suffixes\": suffixes,\n            },\n            \"loader\": {\n                \"display_name\": \"Loader\",\n                \"is_list\": True,\n                \"required\": True,\n                \"options\": loader_options,\n                \"value\": \"Automatic\",\n            },\n        }\n\n    def build(self, file_path: str, loader: str) -> Document:\n        file_type = file_path.split(\".\")[-1]\n\n        # Mapeie o nome do loader selecionado para suas informações\n        selected_loader_info = None\n        for loader_info in self.loaders_info:\n            if loader_info[\"name\"] == loader:\n                selected_loader_info = loader_info\n                break\n\n        if selected_loader_info is None and loader != \"Automatic\":\n            raise ValueError(f\"Loader {loader} not found in the loader info list\")\n\n        if loader == \"Automatic\":\n            # Determine o loader automaticamente com base na extensão do arquivo\n            default_loader_info = None\n            for info in self.loaders_info:\n                if \"defaultFor\" in info and file_type in info[\"defaultFor\"]:\n                    default_loader_info = info\n                    break\n\n            if default_loader_info is None:\n                raise ValueError(f\"No default loader found for file type: {file_type}\")\n\n            selected_loader_info = default_loader_info\n        if isinstance(selected_loader_info, dict):\n            loader_import: str = selected_loader_info[\"import\"]\n        else:\n            raise ValueError(\n                f\"Loader info for {loader} is not a dict\\nLoader info:\\n{selected_loader_info}\"\n            )\n        module_name, class_name = loader_import.rsplit(\".\", 1)\n\n        try:\n            # Importe o loader dinamicamente\n            loader_module = __import__(module_name, fromlist=[class_name])\n            loader_instance = getattr(loader_module, class_name)\n        except ImportError as e:\n            raise ValueError(\n                f\"Loader {loader} could not be imported\\nLoader info:\\n{selected_loader_info}\"\n            ) from e\n\n        result = loader_instance(file_path=file_path)\n        result = result.load()\n        self.status = result\n        return result","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":""},"loader":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"Text (.txt)","fileTypes":[],"file_path":"","password":false,"options":["Automatic","Airbyte JSON (.jsonl)","JSON (.json)","BeautifulSoup4 HTML (.html, .htm)","CSV (.csv)","CoNLL-U (.conllu)","EverNote (.enex)","Facebook Chat (.json)","Outlook Message (.msg)","PyPDF (.pdf)","Subtitle (.str)","Text (.txt)","Unstructured Email (.eml)","Unstructured HTML (.html, .htm)","Unstructured Markdown (.md)","Unstructured PowerPoint (.pptx)","Unstructured Word (.docx)"],"name":"loader","display_name":"Loader","advanced":false,"dynamic":false,"info":""},"_type":"CustomComponent"},"description":"A generic loader that auto-detects file types.","base_classes":["Document"],"display_name":"File Loader","documentation":"","custom_fields":{"file_path":null,"loader":null},"output_types":["Document"],"field_formatters":{},"beta":true,"official":false},"id":"CustomComponent-RtlTI","description":"A generic loader that auto-detects file types.","display_name":"File Loader"},"id":"CustomComponent-RtlTI","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"is_component":true}