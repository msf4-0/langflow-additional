{"name":"toolkits","description":"An agent that selects which Vector Store to use based on the input","data":{"nodes":[{"width":384,"height":399,"id":"VectorStoreInfo-st1Iy","type":"genericNode","position":{"x":1453.8500764104347,"y":-601.9573048787256},"data":{"type":"VectorStoreInfo","node":{"template":{"vectorstore":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"vectorstore","advanced":false,"dynamic":false,"info":"","type":"VectorStore","list":false},"description":{"required":true,"placeholder":"","show":true,"multiline":true,"password":false,"name":"description","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":"database"},"name":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"name","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":"tmp"},"_type":"VectorStoreInfo"},"description":"Information about a VectorStore.","base_classes":["VectorStoreInfo"],"display_name":"VectorStoreInfo","documentation":""},"id":"VectorStoreInfo-st1Iy","value":null},"selected":false,"positionAbsolute":{"x":1453.8500764104347,"y":-601.9573048787256},"dragging":false},{"width":384,"height":267,"id":"VectorStoreRouterAgent-dTByr","type":"genericNode","position":{"x":2472.6895358833494,"y":-1007.9446214062591},"data":{"type":"VectorStoreRouterAgent","node":{"template":{"llm":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"llm","display_name":"LLM","advanced":false,"dynamic":false,"info":"","type":"BaseLanguageModel","list":false},"vectorstoreroutertoolkit":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"vectorstoreroutertoolkit","display_name":"Vector Store Router Toolkit","advanced":false,"dynamic":false,"info":"","type":"VectorStoreRouterToolkit","list":false},"_type":"vectorstorerouter_agent"},"description":"Construct an agent from a Vector Store Router.","base_classes":["AgentExecutor"],"display_name":"VectorStoreRouterAgent","documentation":""},"id":"VectorStoreRouterAgent-dTByr","value":null},"selected":false,"positionAbsolute":{"x":2472.6895358833494,"y":-1007.9446214062591},"dragging":false},{"width":384,"height":227,"id":"VectorStoreRouterToolkit-Wlgpo","type":"genericNode","position":{"x":1950.365974759041,"y":-1187.9950390730755},"data":{"type":"VectorStoreRouterToolkit","node":{"template":{"llm":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"llm","advanced":false,"dynamic":false,"info":"","type":"BaseLanguageModel","list":false},"vectorstores":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"vectorstores","advanced":false,"dynamic":false,"info":"","type":"VectorStoreInfo","list":true},"_type":"VectorStoreRouterToolkit"},"description":"Toolkit for routing between Vector Stores.","base_classes":["BaseToolkit","VectorStoreRouterToolkit","Tool"],"display_name":"VectorStoreRouterToolkit","documentation":""},"id":"VectorStoreRouterToolkit-Wlgpo","value":null},"selected":false,"positionAbsolute":{"x":1950.365974759041,"y":-1187.9950390730755},"dragging":false},{"width":384,"height":399,"id":"VectorStoreInfo-SPiLs","type":"genericNode","position":{"x":1475.4953463167612,"y":-1166.4344593839103},"data":{"type":"VectorStoreInfo","node":{"template":{"vectorstore":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"vectorstore","advanced":false,"dynamic":false,"info":"","type":"VectorStore","list":false},"description":{"required":true,"placeholder":"","show":true,"multiline":true,"password":false,"name":"description","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":"database"},"name":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"name","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":"tmp"},"_type":"VectorStoreInfo"},"description":"Information about a VectorStore.","base_classes":["VectorStoreInfo"],"display_name":"VectorStoreInfo","documentation":""},"id":"VectorStoreInfo-SPiLs","value":null},"selected":false,"positionAbsolute":{"x":1475.4953463167612,"y":-1166.4344593839103},"dragging":false},{"width":384,"height":515,"id":"Chroma-uJXjq","type":"genericNode","position":{"x":1002.8383662037747,"y":-578.2622844002965},"data":{"type":"Chroma","node":{"template":{"client":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"client","advanced":false,"dynamic":false,"info":"","type":"chromadb.Client","list":false},"client_settings":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"client_settings","advanced":false,"dynamic":false,"info":"","type":"chromadb.config.Setting","list":true},"documents":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","type":"Document","list":true},"embedding":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","type":"Embeddings","list":false},"chroma_server_cors_allow_origins":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_cors_allow_origins","display_name":"Chroma Server CORS Allow Origins","advanced":true,"dynamic":false,"info":"","type":"str","list":true},"chroma_server_grpc_port":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_grpc_port","display_name":"Chroma Server GRPC Port","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_host":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_host","display_name":"Chroma Server Host","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_http_port":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_http_port","display_name":"Chroma Server HTTP Port","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_ssl_enabled":{"required":false,"placeholder":"","show":true,"multiline":false,"value":false,"password":false,"name":"chroma_server_ssl_enabled","display_name":"Chroma Server SSL Enabled","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"collection_metadata":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"collection_metadata","advanced":false,"dynamic":false,"info":"","type":"code","list":false},"collection_name":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"text_loader","password":false,"name":"collection_name","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"ids":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"ids","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"metadatas":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"metadatas","advanced":false,"dynamic":false,"info":"","type":"code","list":true},"persist":{"required":false,"placeholder":"","show":true,"multiline":false,"value":true,"password":false,"name":"persist","display_name":"Persist","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"persist_directory":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"persist_directory","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":"tmp"},"search_kwargs":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"{}","password":false,"name":"search_kwargs","advanced":true,"dynamic":false,"info":"","type":"code","list":false},"_type":"Chroma"},"description":"Create a Chroma vectorstore from a raw documents.","base_classes":["VectorStore","Chroma","BaseRetriever","VectorStoreRetriever"],"display_name":"Chroma","documentation":"https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/chroma"},"id":"Chroma-uJXjq","value":null},"selected":false,"positionAbsolute":{"x":1002.8383662037747,"y":-578.2622844002965},"dragging":false},{"width":384,"height":515,"id":"Chroma-qI8QF","type":"genericNode","position":{"x":1006.838366203775,"y":-1186.2622844002963},"data":{"type":"Chroma","node":{"template":{"client":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"client","advanced":false,"dynamic":false,"info":"","type":"chromadb.Client","list":false},"client_settings":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"client_settings","advanced":false,"dynamic":false,"info":"","type":"chromadb.config.Setting","list":true},"documents":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","type":"Document","list":true},"embedding":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","type":"Embeddings","list":false},"chroma_server_cors_allow_origins":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_cors_allow_origins","display_name":"Chroma Server CORS Allow Origins","advanced":true,"dynamic":false,"info":"","type":"str","list":true},"chroma_server_grpc_port":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_grpc_port","display_name":"Chroma Server GRPC Port","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_host":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_host","display_name":"Chroma Server Host","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_http_port":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"chroma_server_http_port","display_name":"Chroma Server HTTP Port","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"chroma_server_ssl_enabled":{"required":false,"placeholder":"","show":true,"multiline":false,"value":false,"password":false,"name":"chroma_server_ssl_enabled","display_name":"Chroma Server SSL Enabled","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"collection_metadata":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"collection_metadata","advanced":false,"dynamic":false,"info":"","type":"code","list":false},"collection_name":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"web_loader","password":false,"name":"collection_name","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"ids":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"ids","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"metadatas":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"metadatas","advanced":false,"dynamic":false,"info":"","type":"code","list":true},"persist":{"required":false,"placeholder":"","show":true,"multiline":false,"value":true,"password":false,"name":"persist","display_name":"Persist","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"persist_directory":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"persist_directory","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":"tmp"},"search_kwargs":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"{}","password":false,"name":"search_kwargs","advanced":true,"dynamic":false,"info":"","type":"code","list":false},"_type":"Chroma"},"description":"Create a Chroma vectorstore from a raw documents.","base_classes":["VectorStore","Chroma","BaseRetriever","VectorStoreRetriever"],"display_name":"Chroma","documentation":"https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/chroma"},"id":"Chroma-qI8QF","value":null},"selected":false,"positionAbsolute":{"x":1006.838366203775,"y":-1186.2622844002963},"dragging":false},{"width":384,"height":379,"id":"WebBaseLoader-XOmIA","type":"genericNode","position":{"x":-34.16541560409771,"y":-1236.7642243003086},"data":{"type":"WebBaseLoader","node":{"template":{"metadata":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"{}","password":false,"name":"metadata","display_name":"Metadata","advanced":false,"dynamic":false,"info":"","type":"code","list":false},"web_path":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"https://en.wikipedia.org/wiki/History","password":false,"name":"web_path","display_name":"Web Page","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"_type":"WebBaseLoader"},"description":"Load HTML pages using `urllib` and parse them with `BeautifulSoup'.","base_classes":["Document"],"display_name":"WebBaseLoader","custom_fields":{},"output_types":["Document"],"documentation":"https://python.langchain.com/docs/modules/data_connection/document_loaders/integrations/web_base"},"id":"WebBaseLoader-XOmIA","value":null},"selected":false,"positionAbsolute":{"x":-34.16541560409771,"y":-1236.7642243003086}},{"width":384,"height":485,"id":"RecursiveCharacterTextSplitter-EvJuy","type":"genericNode","position":{"x":534.7181746775774,"y":-1338.5369766901497},"data":{"type":"RecursiveCharacterTextSplitter","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import Optional\nfrom langflow import CustomComponent\nfrom langchain.schema import Document\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        # self.repr_value = build_loader_repr_from_documents(docs)\n        self.repr_value = separators\n        return docs\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","chunk_overlap":{"required":false,"placeholder":"","show":true,"multiline":false,"value":200,"password":false,"name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"The amount of overlap between chunks.","type":"int","list":false},"chunk_size":{"required":false,"placeholder":"","show":true,"multiline":false,"value":1000,"password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"The maximum length of each chunk.","type":"int","list":false},"documents":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"The documents to split.","type":"Document","list":true},"separators":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"separators","display_name":"Separators","advanced":false,"dynamic":false,"info":"The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].","type":"str","list":true,"value":[".."]}},"description":"Split text into chunks of a specified length.","base_classes":["Document"],"display_name":"Recursive Character Text Splitter","custom_fields":{},"output_types":["Document"],"documentation":"https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter"},"id":"RecursiveCharacterTextSplitter-EvJuy","value":null},"selected":false,"positionAbsolute":{"x":534.7181746775774,"y":-1338.5369766901497},"dragging":false},{"width":384,"height":485,"id":"RecursiveCharacterTextSplitter-NKc8C","type":"genericNode","position":{"x":511.23215489530617,"y":-247.74183569134175},"data":{"type":"RecursiveCharacterTextSplitter","node":{"template":{"code":{"dynamic":true,"required":true,"placeholder":"","show":false,"multiline":true,"value":"from typing import Optional\nfrom langflow import CustomComponent\nfrom langchain.schema import Document\n\n\nclass RecursiveCharacterTextSplitterComponent(CustomComponent):\n    display_name: str = \"Recursive Character Text Splitter\"\n    description: str = \"Split text into chunks of a specified length.\"\n    documentation: str = \"https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\n                \"display_name\": \"Documents\",\n                \"info\": \"The documents to split.\",\n            },\n            \"separators\": {\n                \"display_name\": \"Separators\",\n                \"info\": 'The characters to split on.\\nIf left empty defaults to [\"\\\\n\\\\n\", \"\\\\n\", \" \", \"\"].',\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\n                \"display_name\": \"Chunk Size\",\n                \"info\": \"The maximum length of each chunk.\",\n                \"field_type\": \"int\",\n                \"value\": 1000,\n            },\n            \"chunk_overlap\": {\n                \"display_name\": \"Chunk Overlap\",\n                \"info\": \"The amount of overlap between chunks.\",\n                \"field_type\": \"int\",\n                \"value\": 200,\n            },\n            \"code\": {\"show\": False},\n        }\n\n    def build(\n        self,\n        documents: list[Document],\n        separators: Optional[list[str]] = None,\n        chunk_size: Optional[int] = 1000,\n        chunk_overlap: Optional[int] = 200,\n    ) -> list[Document]:\n        \"\"\"\n        Split text into chunks of a specified length.\n\n        Args:\n            separators (list[str]): The characters to split on.\n            chunk_size (int): The maximum length of each chunk.\n            chunk_overlap (int): The amount of overlap between chunks.\n            length_function (function): The function to use to calculate the length of the text.\n\n        Returns:\n            list[str]: The chunks of text.\n        \"\"\"\n        from langchain.text_splitter import RecursiveCharacterTextSplitter\n\n        if separators == \"\":\n            separators = None\n        elif separators:\n            # check if the separators list has escaped characters\n            # if there are escaped characters, unescape them\n            separators = [x.encode().decode(\"unicode-escape\") for x in separators]\n\n        # Make sure chunk_size and chunk_overlap are ints\n        if isinstance(chunk_size, str):\n            chunk_size = int(chunk_size)\n        if isinstance(chunk_overlap, str):\n            chunk_overlap = int(chunk_overlap)\n        splitter = RecursiveCharacterTextSplitter(\n            separators=separators,\n            chunk_size=chunk_size,\n            chunk_overlap=chunk_overlap,\n        )\n\n        docs = splitter.split_documents(documents)\n        # self.repr_value = build_loader_repr_from_documents(docs)\n        self.repr_value = separators\n        return docs\n","password":false,"name":"code","advanced":false,"type":"code","list":false},"_type":"CustomComponent","chunk_overlap":{"required":false,"placeholder":"","show":true,"multiline":false,"value":200,"password":false,"name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"The amount of overlap between chunks.","type":"int","list":false},"chunk_size":{"required":false,"placeholder":"","show":true,"multiline":false,"value":1000,"password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"The maximum length of each chunk.","type":"int","list":false},"documents":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"The documents to split.","type":"Document","list":true},"separators":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"separators","display_name":"Separators","advanced":false,"dynamic":false,"info":"The characters to split on.\nIf left empty defaults to [\"\\n\\n\", \"\\n\", \" \", \"\"].","type":"str","list":true,"value":"."}},"description":"Split text into chunks of a specified length.","base_classes":["Document"],"display_name":"Recursive Character Text Splitter","custom_fields":{},"output_types":["Document"],"documentation":"https://docs.langflow.org/components/text-splitters#recursivecharactertextsplitter"},"id":"RecursiveCharacterTextSplitter-NKc8C","value":null},"selected":false,"positionAbsolute":{"x":511.23215489530617,"y":-247.74183569134175},"dragging":false},{"width":384,"height":621,"id":"ChatOpenAI-dnyHT","type":"genericNode","position":{"x":1969.9749391496928,"y":-798.358521697917},"data":{"type":"ChatOpenAI","node":{"template":{"callbacks":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"callbacks","advanced":false,"dynamic":false,"info":"","type":"langchain.callbacks.base.BaseCallbackHandler","list":true},"cache":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"cache","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"client":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"client","advanced":false,"dynamic":false,"info":"","type":"Any","list":false},"max_retries":{"required":false,"placeholder":"","show":false,"multiline":false,"value":6,"password":false,"name":"max_retries","advanced":false,"dynamic":false,"info":"","type":"int","list":false},"max_tokens":{"required":false,"placeholder":"","show":true,"multiline":false,"password":true,"name":"max_tokens","advanced":false,"dynamic":false,"info":"","type":"int","list":false,"value":""},"metadata":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"metadata","advanced":false,"dynamic":false,"info":"","type":"code","list":false},"model_kwargs":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"model_kwargs","advanced":true,"dynamic":false,"info":"","type":"code","list":false},"model_name":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"gpt-3.5-turbo","password":false,"options":["gpt-3.5-turbo-0613","gpt-3.5-turbo","gpt-3.5-turbo-16k-0613","gpt-3.5-turbo-16k","gpt-4-0613","gpt-4-32k-0613","gpt-4","gpt-4-32k"],"name":"model_name","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"n":{"required":false,"placeholder":"","show":false,"multiline":false,"value":1,"password":false,"name":"n","advanced":false,"dynamic":false,"info":"","type":"int","list":false},"openai_api_base":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":false,"dynamic":false,"info":"\nThe base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.\n","type":"str","list":false},"openai_api_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"openai_organization":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"openai_organization","display_name":"OpenAI Organization","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"openai_proxy":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"openai_proxy","display_name":"OpenAI Proxy","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"request_timeout":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"request_timeout","advanced":false,"dynamic":false,"info":"","type":"float","list":false},"streaming":{"required":false,"placeholder":"","show":false,"multiline":false,"value":false,"password":false,"name":"streaming","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"tags":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"tags","advanced":false,"dynamic":false,"info":"","type":"str","list":true},"temperature":{"required":false,"placeholder":"","show":true,"multiline":false,"value":0.7,"password":false,"name":"temperature","advanced":false,"dynamic":false,"info":"","type":"float","list":false},"tiktoken_model_name":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"tiktoken_model_name","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"verbose":{"required":false,"placeholder":"","show":false,"multiline":false,"value":false,"password":false,"name":"verbose","advanced":false,"dynamic":false,"info":"","type":"bool","list":false},"_type":"ChatOpenAI"},"description":"`OpenAI` Chat large language models API.","base_classes":["BaseChatModel","BaseLanguageModel","ChatOpenAI","BaseLLM"],"display_name":"ChatOpenAI","custom_fields":{},"output_types":[],"documentation":"https://python.langchain.com/docs/modules/model_io/models/chat/integrations/openai"},"id":"ChatOpenAI-dnyHT","value":null},"positionAbsolute":{"x":1969.9749391496928,"y":-798.358521697917},"selected":false,"dragging":false},{"width":384,"height":359,"id":"OpenAIEmbeddings-x8WPj","type":"genericNode","position":{"x":534.7181746775773,"y":-699.1953270616617},"data":{"type":"OpenAIEmbeddings","node":{"template":{"allowed_special":{"required":false,"placeholder":"","show":true,"multiline":false,"value":[],"password":false,"name":"allowed_special","advanced":true,"dynamic":false,"info":"","type":"Literal'all'","list":true},"disallowed_special":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"all","password":false,"name":"disallowed_special","advanced":true,"dynamic":false,"info":"","type":"Literal'all'","list":true},"chunk_size":{"required":false,"placeholder":"","show":true,"multiline":false,"value":1000,"password":false,"name":"chunk_size","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"client":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"client","advanced":true,"dynamic":false,"info":"","type":"Any","list":false},"deployment":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"text-embedding-ada-002","password":false,"name":"deployment","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"embedding_ctx_length":{"required":false,"placeholder":"","show":true,"multiline":false,"value":8191,"password":false,"name":"embedding_ctx_length","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"headers":{"required":false,"placeholder":"","show":false,"multiline":true,"value":"{'Authorization': 'Bearer <token>'}","password":false,"name":"headers","advanced":true,"dynamic":false,"info":"","type":"Any","list":false},"max_retries":{"required":false,"placeholder":"","show":true,"multiline":false,"value":6,"password":false,"name":"max_retries","advanced":true,"dynamic":false,"info":"","type":"int","list":false},"model":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"text-embedding-ada-002","password":false,"name":"model","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"model_kwargs":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"model_kwargs","advanced":true,"dynamic":false,"info":"","type":"code","list":false},"openai_api_base":{"required":false,"placeholder":"","show":true,"multiline":false,"password":true,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"","type":"str","list":false,"value":""},"openai_api_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"","type":"str","list":false},"openai_api_type":{"required":false,"placeholder":"","show":true,"multiline":false,"password":true,"name":"openai_api_type","display_name":"OpenAI API Type","advanced":true,"dynamic":false,"info":"","type":"str","list":false,"value":""},"openai_api_version":{"required":false,"placeholder":"","show":true,"multiline":false,"password":true,"name":"openai_api_version","display_name":"OpenAI API Version","advanced":true,"dynamic":false,"info":"","type":"str","list":false,"value":""},"openai_organization":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"openai_organization","display_name":"OpenAI Organization","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"openai_proxy":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"openai_proxy","display_name":"OpenAI Proxy","advanced":true,"dynamic":false,"info":"","type":"str","list":false},"request_timeout":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"request_timeout","advanced":true,"dynamic":false,"info":"","type":"float","list":false},"show_progress_bar":{"required":false,"placeholder":"","show":true,"multiline":false,"value":false,"password":false,"name":"show_progress_bar","advanced":true,"dynamic":false,"info":"","type":"bool","list":false},"tiktoken_model_name":{"required":false,"placeholder":"","show":true,"multiline":false,"password":true,"name":"tiktoken_model_name","advanced":false,"dynamic":false,"info":"","type":"str","list":false,"value":""},"_type":"OpenAIEmbeddings"},"description":"OpenAI embedding models.","base_classes":["Embeddings","OpenAIEmbeddings"],"display_name":"OpenAIEmbeddings","custom_fields":{},"output_types":[],"documentation":"https://python.langchain.com/docs/modules/data_connection/text_embedding/integrations/openai"},"id":"OpenAIEmbeddings-x8WPj","value":null},"selected":false,"positionAbsolute":{"x":534.7181746775773,"y":-699.1953270616617},"dragging":false},{"width":384,"height":359,"id":"TextLoader-uBzAH","type":"genericNode","position":{"x":-52.773952955091204,"y":-151.4756927535671},"data":{"type":"TextLoader","node":{"template":{"file_path":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"read.txt","suffixes":[".txt"],"password":false,"name":"file_path","advanced":false,"dynamic":false,"info":"","type":"file","list":false,"fileTypes":["txt"],"file_path":null},"metadata":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"{}","password":false,"name":"metadata","display_name":"Metadata","advanced":false,"dynamic":false,"info":"","type":"code","list":false},"_type":"TextLoader"},"description":"Load text file.","base_classes":["Document"],"display_name":"TextLoader","custom_fields":{},"output_types":["Document"],"documentation":"https://python.langchain.com/docs/modules/data_connection/document_loaders/","beta":false,"error":null},"id":"TextLoader-uBzAH","value":null},"selected":false,"positionAbsolute":{"x":-52.773952955091204,"y":-151.4756927535671},"dragging":false}],"edges":[{"source":"VectorStoreRouterToolkit-Wlgpo","sourceHandle":"VectorStoreRouterToolkit|VectorStoreRouterToolkit-Wlgpo|BaseToolkit|VectorStoreRouterToolkit|Tool","target":"VectorStoreRouterAgent-dTByr","targetHandle":"VectorStoreRouterToolkit|vectorstoreroutertoolkit|VectorStoreRouterAgent-dTByr","className":"","id":"reactflow__edge-VectorStoreRouterToolkit-WlgpoVectorStoreRouterToolkit|VectorStoreRouterToolkit-Wlgpo|VectorStoreRouterToolkit|BaseToolkit|Tool-VectorStoreRouterAgent-dTByrVectorStoreRouterToolkit|vectorstoreroutertoolkit|VectorStoreRouterAgent-dTByr","selected":false,"style":{"stroke":"#555"},"animated":false},{"source":"VectorStoreInfo-st1Iy","sourceHandle":"VectorStoreInfo|VectorStoreInfo-st1Iy|VectorStoreInfo","target":"VectorStoreRouterToolkit-Wlgpo","targetHandle":"VectorStoreInfo|vectorstores|VectorStoreRouterToolkit-Wlgpo","className":"","id":"reactflow__edge-VectorStoreInfo-st1IyVectorStoreInfo|VectorStoreInfo-st1Iy|VectorStoreInfo-VectorStoreRouterToolkit-WlgpoVectorStoreInfo|vectorstores|VectorStoreRouterToolkit-Wlgpo","selected":false,"style":{"stroke":"#555"},"animated":false},{"source":"VectorStoreInfo-SPiLs","sourceHandle":"VectorStoreInfo|VectorStoreInfo-SPiLs|VectorStoreInfo","target":"VectorStoreRouterToolkit-Wlgpo","targetHandle":"VectorStoreInfo|vectorstores|VectorStoreRouterToolkit-Wlgpo","className":"","id":"reactflow__edge-VectorStoreInfo-SPiLsVectorStoreInfo|VectorStoreInfo-SPiLs|VectorStoreInfo-VectorStoreRouterToolkit-WlgpoVectorStoreInfo|vectorstores|VectorStoreRouterToolkit-Wlgpo","selected":false,"style":{"stroke":"#555"},"animated":false},{"source":"Chroma-uJXjq","sourceHandle":"Chroma|Chroma-uJXjq|VectorStore|Chroma|BaseRetriever|VectorStoreRetriever","target":"VectorStoreInfo-st1Iy","targetHandle":"VectorStore|vectorstore|VectorStoreInfo-st1Iy","style":{"stroke":"#555"},"animated":false,"id":"reactflow__edge-Chroma-uJXjqChroma|Chroma-uJXjq|Chroma|VectorStore|BaseRetriever|VectorStoreRetriever-VectorStoreInfo-st1IyVectorStore|vectorstore|VectorStoreInfo-st1Iy","selected":false,"className":""},{"source":"Chroma-qI8QF","sourceHandle":"Chroma|Chroma-qI8QF|VectorStore|Chroma|BaseRetriever|VectorStoreRetriever","target":"VectorStoreInfo-SPiLs","targetHandle":"VectorStore|vectorstore|VectorStoreInfo-SPiLs","style":{"stroke":"#555"},"animated":false,"id":"reactflow__edge-Chroma-qI8QFChroma|Chroma-qI8QF|Chroma|VectorStore|BaseRetriever|VectorStoreRetriever-VectorStoreInfo-SPiLsVectorStore|vectorstore|VectorStoreInfo-SPiLs","selected":false,"className":""},{"source":"WebBaseLoader-XOmIA","sourceHandle":"WebBaseLoader|WebBaseLoader-XOmIA|Document","target":"RecursiveCharacterTextSplitter-EvJuy","targetHandle":"Document|documents|RecursiveCharacterTextSplitter-EvJuy","style":{"stroke":"#555"},"className":"","animated":false,"id":"reactflow__edge-WebBaseLoader-XOmIAWebBaseLoader|WebBaseLoader-XOmIA|Document-RecursiveCharacterTextSplitter-EvJuyDocument|documents|RecursiveCharacterTextSplitter-EvJuy","selected":false},{"source":"RecursiveCharacterTextSplitter-NKc8C","sourceHandle":"RecursiveCharacterTextSplitter|RecursiveCharacterTextSplitter-NKc8C|Document","target":"Chroma-uJXjq","targetHandle":"Document|documents|Chroma-uJXjq","style":{"stroke":"#555"},"className":"","animated":false,"id":"reactflow__edge-RecursiveCharacterTextSplitter-NKc8CRecursiveCharacterTextSplitter|RecursiveCharacterTextSplitter-NKc8C|Document-Chroma-uJXjqDocument|documents|Chroma-uJXjq","selected":false},{"source":"RecursiveCharacterTextSplitter-EvJuy","sourceHandle":"RecursiveCharacterTextSplitter|RecursiveCharacterTextSplitter-EvJuy|Document","target":"Chroma-qI8QF","targetHandle":"Document|documents|Chroma-qI8QF","style":{"stroke":"#555"},"className":"","animated":false,"id":"reactflow__edge-RecursiveCharacterTextSplitter-EvJuyRecursiveCharacterTextSplitter|RecursiveCharacterTextSplitter-EvJuy|Document-Chroma-qI8QFDocument|documents|Chroma-qI8QF","selected":false},{"source":"ChatOpenAI-dnyHT","sourceHandle":"ChatOpenAI|ChatOpenAI-dnyHT|BaseChatModel|BaseLanguageModel|ChatOpenAI|BaseLLM","target":"VectorStoreRouterAgent-dTByr","targetHandle":"BaseLanguageModel|llm|VectorStoreRouterAgent-dTByr","style":{"stroke":"#555"},"className":"","animated":false,"id":"reactflow__edge-ChatOpenAI-dnyHTChatOpenAI|ChatOpenAI-dnyHT|BaseChatModel|BaseLanguageModel|ChatOpenAI|BaseLLM-VectorStoreRouterAgent-dTByrBaseLanguageModel|llm|VectorStoreRouterAgent-dTByr","selected":false},{"source":"OpenAIEmbeddings-x8WPj","sourceHandle":"OpenAIEmbeddings|OpenAIEmbeddings-x8WPj|Embeddings|OpenAIEmbeddings","target":"Chroma-uJXjq","targetHandle":"Embeddings|embedding|Chroma-uJXjq","style":{"stroke":"#555"},"className":"","animated":false,"id":"reactflow__edge-OpenAIEmbeddings-x8WPjOpenAIEmbeddings|OpenAIEmbeddings-x8WPj|Embeddings|OpenAIEmbeddings-Chroma-uJXjqEmbeddings|embedding|Chroma-uJXjq","selected":false},{"source":"OpenAIEmbeddings-x8WPj","sourceHandle":"OpenAIEmbeddings|OpenAIEmbeddings-x8WPj|Embeddings|OpenAIEmbeddings","target":"Chroma-qI8QF","targetHandle":"Embeddings|embedding|Chroma-qI8QF","style":{"stroke":"#555"},"className":"","animated":false,"id":"reactflow__edge-OpenAIEmbeddings-x8WPjOpenAIEmbeddings|OpenAIEmbeddings-x8WPj|Embeddings|OpenAIEmbeddings-Chroma-qI8QFEmbeddings|embedding|Chroma-qI8QF","selected":false},{"source":"TextLoader-uBzAH","sourceHandle":"TextLoader|TextLoader-uBzAH|Document","target":"RecursiveCharacterTextSplitter-NKc8C","targetHandle":"Document|documents|RecursiveCharacterTextSplitter-NKc8C","style":{"stroke":"#555"},"className":"","animated":false,"id":"reactflow__edge-TextLoader-uBzAHTextLoader|TextLoader-uBzAH|Document-RecursiveCharacterTextSplitter-NKc8CDocument|documents|RecursiveCharacterTextSplitter-NKc8C"}],"viewport":{"x":114.32808793468166,"y":749.8024798139589,"zoom":0.5290258498372881}},"id":"56f737a6-a209-4fc2-aeae-3bbfb6ce543e","style":null}